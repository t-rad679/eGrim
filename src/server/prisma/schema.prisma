generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider                  = "typegraphql-prisma"
  output                    = "../../../out/type-graphql"
  omitInputFieldsByDefault  = ["id", "createdAt", "updatedAt", "moonPhase"]
  omitOutputFieldsByDefault = ["passwordHash"]
  emitRedundantTypesInfo    = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  roles        Role[]   @default([USER])
  rituals      Ritual[]
  person       Person?  @relation(fields: [personId], references: [id])
  personId     String?  @unique
  passwordHash String
}

enum Role {
  USER
  ADMIN
}

// Ritual models
model Ritual {
  id             String                              @id @default(uuid())
  createdAt      DateTime                            @default(now())
  updatedAt      DateTime                            @updatedAt
  user           User                                @relation(fields: [userId], references: [id])
  type           RitualType
  description    String
  // TODO: Consider making steps a model, but I'm not sure what I would put in there
  steps          String[]
  date           DateTime
  // TODO: Consider adding more astrological data?
  moonPhase      Decimal // If this is null, the API we use to fetch it has failed and we should throw an error
  pictures       String[]
  notes          String?
  results        RitualResults                       @relation(fields: [resultsId], references: [id])
  outdoor        Boolean                             @default(false)
  // TODO: validate that user, querent and reader are in participants for tarot readings
  participants   ParticipantPersonToRitualRelation[]
  location       Location                            @relation(fields: [locationId], references: [id])
  tags           TagRelation[]
  userId         String
  tarotReading   TarotReading?
  locationId     String
  toolRelation   ToolToRitualRelation[]
  toolRelationId String
  resultsId      String
}

enum RitualType {
  TAROT
  GENERAL
}

model Tool {
  id           String                 @id @default(uuid())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  name         String
  tags         TagRelation[]
  toolRelation ToolToRitualRelation[]
}

model ToolToRitualRelation {
  ritual           Ritual                                @relation(fields: [ritualId], references: [id])
  tool             Tool                                  @relation(fields: [toolId], references: [id])
  wieldersRelation WielderPersonToToolRelationRelation[]
  toolId           String
  ritualId         String

  @@id([toolId, ritualId])
}

model WielderPersonToToolRelationRelation {
  toolToRitualRelation         ToolToRitualRelation @relation(fields: [toolToRitualRelationToolId, toolToRitualRelationRitualId], references: [toolId, ritualId])
  wielder                      Person               @relation(fields: [wielderId], references: [id])
  toolToRitualRelationToolId   String
  toolToRitualRelationRitualId String
  wielderId                    String

  @@id([toolToRitualRelationToolId, toolToRitualRelationRitualId, wielderId])
}

model Location {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  address     String?
  city        String        @default("Atlanta")
  state       String        @default("GA")
  country     String        @default("USA")
  description String?
  tags        TagRelation[]
  ritual      Ritual[]
}

model ParticipantPersonToRitualRelation {
  person   Person @relation(fields: [personId], references: [id])
  ritual   Ritual @relation(fields: [ritualId], references: [id])
  personId String
  ritualId String

  @@id([personId, ritualId])
}

// Tarot models
enum TarotSuit {
  SWORDS
  WANDS
  PENTACLES
  CUPS
  MAJOR_ARCANA
}

model TarotReading {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  querent         Person          @relation(name: "QuerentToReadingRelation", fields: [querentPersonId], references: [id])
  querentPersonId String
  reader          Person          @relation(name: "ReaderToReadingRelation", fields: [readerPersonId], references: [id])
  readerPersonId  String
  ritual          Ritual          @relation(fields: [ritualId], references: [id])
  spread          TarotSpread     @relation(fields: [tarotSpreadId], references: [id])
  cardsDrawn      TarotCardDraw[]
  ritualId        String          @unique
  tarotSpreadId   String
}

model TarotSpread {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  name         String
  description  String
  positions    TarotPosition[]
  tarotReading TarotReading[]
}

model TarotPosition {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  number        Int
  description   String
  tarotSpread   TarotSpread     @relation(fields: [tarotSpreadId], references: [id])
  tags          TagRelation[]
  tarotSpreadId String
  cardDrawn     TarotCardDraw[]
}

model TarotCardDraw {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  notes           String?
  tags            TagRelation[]
  position        TarotPosition @relation(fields: [tarotPositionId], references: [id])
  tarotReading    TarotReading  @relation(fields: [tarotReadingId], references: [id])
  tarotReadingId  String
  tarotPositionId String        @unique
}

model TarotCard {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  suit          TarotSuit
  number        Int
  notes         String
  tags          TagRelation[]
  tarotDeckCard TarotDeckCard[]
}

model TarotDeckCard {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  notes       String
  card        TarotCard     @relation(fields: [tarotCardId], references: [id])
  tags        TagRelation[]
  pictures    String
  tarotCardId String
  tarotDeck   TarotDeck     @relation(fields: [tarotDeckId], references: [id])
  tarotDeckId String
}

model TarotDeck {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  name      String
  notes     String
  tags      TagRelation[]
  cards     TarotDeckCard[]
}

// Utility models
model Person {
  id                                  String                                @id @default(uuid())
  createdAt                           DateTime                              @default(now())
  updatedAt                           DateTime                              @updatedAt
  name                                String
  tags                                TagRelation[]
  tarotReadingsForQuerent             TarotReading[]                        @relation(name: "QuerentToReadingRelation")
  tarotReadingsForReader              TarotReading[]                        @relation(name: "ReaderToReadingRelation")
  participantPersonToRitualRelation   ParticipantPersonToRitualRelation[]
  WielderPersonToToolRelationRelation WielderPersonToToolRelationRelation[]
  user                                User?
}

model Tag {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  text        String
  type        String // This is the name of the table this tag is associated with
  tagRelation TagRelation[]
}

model TagRelation {
  id              String         @id @default(uuid()) // id field exists because multi-field IDs must be required
  tag             Tag            @relation(fields: [tagId], references: [id])
  tagId           String
  ritual          Ritual?        @relation(fields: [ritualId], references: [id])
  ritualId        String?
  tool            Tool?          @relation(fields: [toolId], references: [id])
  toolId          String?
  tarotCardDraw   TarotCardDraw? @relation(fields: [tarotCardDrawId], references: [id])
  tarotCardDrawId String?
  tarotCard       TarotCard?     @relation(fields: [tarotCardId], references: [id])
  tarotCardId     String?
  tarotDeckCard   TarotDeckCard? @relation(fields: [tarotDeckCardId], references: [id])
  tarotDeckCardId String?
  tarotDeck       TarotDeck?     @relation(fields: [tarotDeckId], references: [id])
  tarotDeckId     String?
  tarotPosition   TarotPosition? @relation(fields: [tarotPositionId], references: [id])
  tarotPositionId String?
  person          Person?        @relation(fields: [personId], references: [id])
  personId        String?
  ritualResults   RitualResults? @relation(fields: [ritualResultsId], references: [id])
  ritualResultsId String?
  Location        Location?      @relation(fields: [locationId], references: [id])
  locationId      String?
}

model RitualResults {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  tags      TagRelation[]
  success   Boolean
  notes     String?
  Ritual    Ritual[]
}
