generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider                  = "typegraphql-prisma"
  emitRedundantTypesInfo    = true
  omitInputFieldsByDefault  = ["createdAt", "updatedAt"]
  omitOutputFieldsByDefault = ["passwordHash"]
  output                    = "../../../out/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base models
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events    Event[]
  locations Location[]
  people    Person[]      @relation("Person_createdByUser")
  rituals   Ritual[]
  roles     Role[]        @default([USER])
  spreads   TarotSpread[]
  self      Person?       @relation("Person_selfToUser")
  tags      Tag[]
  decks     TarotDeck[]
  tools     Tool[]

  passwordHash String
  username     String @unique
}

enum Role {
  ADMIN
  USER
}

model Event {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  location         Location?             @relation(fields: [locationId], references: [id])
  locationId       String?
  ritualObservance RitualObservance?
  tags             TagToObjectRelation[]
  type             EventType

  date        DateTime
  description String?
  // TODO: Consider making a model for this
  mood        String?
  // TODO: Consider adding more astrological data?
  moonPhase   Decimal // If this is null, the API we use to fetch it has failed and we should throw an error
  notes       String?
  outdoor     Boolean  @default(false)
  pictures    String[]

  // Contrary to expectation, Event is somehow experiencing symptoms similar to the bug related to
  // Relations with no non-relational data
  // See https://github.com/MichalLytek/typegraphql-prisma/issues/19
  dummy Int?
}

enum EventType {
  JOURNAL_ENTRY
  RITUAL
  SPOOKY_THING
  SYNCHRONICITY
  TAROT
}

// TODO: Consider a "public" field, deciding whether other users can access it
model Location {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Event Event[]
  tags  TagToObjectRelation[]

  address     String?
  city        String?
  country     String?
  description String?
  state       String?
  zip         String?

  @@unique([userId, name])
}

model Person {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation("Person_createdByUser", fields: [userId], references: [id])
  userId String

  selfUser   User?   @relation("Person_selfToUser", fields: [selfUserId], references: [id])
  selfUserId String? @unique // This is redundant, but makes things much easier when working with it

  tags                            TagToObjectRelation[]
  tarotRoleRelation               PersonTarotRoleRelation[]
  ritualObservancesParticipatedIn ParticipantPersonToRitualObservanceRelation[]

  name        String
  description String?

  @@unique([userId, name])
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tagToObjectRelations TagToObjectRelation[]

  name String

  @@unique([userId, name])
}

// We don't include anything that "extends" Event because the event will contain any relevant tags for that
model TagToObjectRelation {
  id String @id @default(uuid()) // id field exists because multi-field IDs must be required

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  event           Event?         @relation(fields: [eventId], references: [id])
  eventId         String?
  location        Location?      @relation(fields: [locationId], references: [id])
  locationId      String?
  person          Person?        @relation(fields: [personId], references: [id])
  personId        String?
  ritual          Ritual?        @relation(fields: [ritualId], references: [id])
  ritualId        String?
  ritualResult    RitualResult?  @relation(fields: [ritualResultId], references: [id])
  ritualResultId  String?
  ritualStep      RitualStep?    @relation(fields: [ritualStepId], references: [id])
  ritualStepId    String?
  tarotCard       TarotCard?     @relation(fields: [tarotCardId], references: [id])
  tarotCardId     String?
  tarotCardDraw   TarotCardDraw? @relation(fields: [tarotCardDrawId], references: [id])
  tarotCardDrawId String?
  tarotDeck       TarotDeck?     @relation(fields: [tarotDeckId], references: [id])
  tarotDeckId     String?
  tarotDeckCard   TarotDeckCard? @relation(fields: [tarotDeckCardId], references: [id])
  tarotDeckCardId String?
  tarotPosition   TarotPosition? @relation(fields: [tarotPositionId], references: [id])
  tarotPositionId String?
  tarotSpread     TarotSpread?   @relation(fields: [tarotSpreadId], references: [id])
  tarotSpreadId   String?
  tool            Tool?          @relation(fields: [toolId], references: [id])
  toolId          String?

  dummy Int? // https://github.com/MichalLytek/typegraphql-prisma/issues/19

  @@unique([tagId, eventId, locationId, personId, ritualId, ritualResultId, ritualStepId, tarotCardId, tarotCardDrawId, tarotDeckId, tarotDeckCardId, tarotPositionId, toolId, tarotSpreadId], name: "TagToObjectRelationCompoundId")
}

// Ritual models
model Ritual {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  observances              RitualObservance[]
  stepsOfThisRitual        RitualStep[]           @relation("RitualSteps")
  stepsThisRitualComprises RitualStep[]           @relation("RitualStepComposition")
  tags                     TagToObjectRelation[]
  tools                    ToolToRitualRelation[]

  name        String? // If empty, we infer it is a one-off or a ritual for a particular tarot spread
  description String?
}

model RitualStep {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // TODO: Validate that these are not the same
  // This is the ritual that this step is a part of
  ritual           Ritual @relation("RitualSteps", fields: [ritualId], references: [id])
  ritualId         String
  // This is a weird name, but it represents the ritual that is done during this step
  composedRitual   Ritual @relation("RitualStepComposition", fields: [composedRitualId], references: [id])
  composedRitualId String

  tarotSpread   TarotSpread? @relation(fields: [tarotSpreadId], references: [id])
  tarotSpreadId String?

  tags                               TagToObjectRelation[]
  tarotReadingsDoneForThisRitualStep TarotReadingToRitualObservanceAndStepRelation[]

  description String?
  number      Int

  @@unique([ritualId, number])
}

model RitualObservance {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event         Event                                           @relation(fields: [eventId], references: [id])
  eventId       String                                          @unique
  ritual        Ritual                                          @relation(fields: [ritualId], references: [id])
  ritualId      String
  // TODO: validate that querent and reader are in participants for tarot readings
  participants  ParticipantPersonToRitualObservanceRelation[]
  results       RitualResult[]
  tarotReadings TarotReadingToRitualObservanceAndStepRelation[]

  notes String?
}

model RitualResult {
  id                 String                @id @default(uuid())
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  tags               TagToObjectRelation[]
  success            Boolean
  notes              String?
  ritualObservance   RitualObservance      @relation(fields: [ritualObservanceId], references: [id])
  ritualObservanceId String                @unique
}

enum RitualRole {
  LEADER
  PARTICIPANT
  SPECTATOR
}

model Tool {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tags         TagToObjectRelation[]
  toolRelation ToolToRitualRelation[]

  name String
}

model ToolToRitualRelation {
  ritual   Ritual                        @relation(fields: [ritualId], references: [id])
  ritualId String
  tool     Tool                          @relation(fields: [toolId], references: [id])
  toolId   String
  wielders WielderPersonToToolRelation[]

  dummy Int? // https://github.com/MichalLytek/typegraphql-prisma/issues/19

  @@id([toolId, ritualId])
}

model ParticipantPersonToRitualObservanceRelation {
  person             Person                        @relation(fields: [personId], references: [id])
  personId           String
  ritualObservance   RitualObservance              @relation(fields: [ritualObservanceId], references: [id])
  ritualObservanceId String
  role               RitualRole
  toolsWielded       WielderPersonToToolRelation[]

  @@id([personId, ritualObservanceId])
}

model WielderPersonToToolRelation {
  wielder            ParticipantPersonToRitualObservanceRelation? @relation(fields: [personId, ritualObservanceId], references: [personId, ritualObservanceId])
  personId           String
  ritualObservanceId String
  tool               ToolToRitualRelation                         @relation(fields: [toolId, ritualId], references: [toolId, ritualId])
  ritualId           String
  toolId             String

  dummy Int? // https://github.com/MichalLytek/typegraphql-prisma/issues/19

  @@id([ritualId, toolId, personId, ritualObservanceId])
}

// Tarot models
model TarotReading {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cardsDrawn                                    TarotCardDraw[]
  // TODO: Validate that both exist. Make field resolvers for them
  querentAndReaderRelations                     PersonTarotRoleRelation[]
  tarotReadingToRitualObservanceAndStepRelation TarotReadingToRitualObservanceAndStepRelation[]

  deck     TarotDeck   @relation(fields: [deckId], references: [id])
  deckId   String
  spread   TarotSpread @relation(fields: [spreadId], references: [id])
  spreadId String

  name String?

  dummy Int? // https://github.com/MichalLytek/typegraphql-prisma/issues/19
}

model PersonTarotRoleRelation {
  person         Person       @relation(fields: [personId], references: [id])
  personId       String
  tarotReading   TarotReading @relation(fields: [tarotReadingId], references: [id])
  tarotReadingId String

  role TarotRole

  @@id([personId, tarotReadingId], name: "PersonTarotRoleRelationCompoundId")
}

enum TarotRole {
  QUERENT
  READER
}

model TarotSpread {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  positions   TarotPosition[]
  readings    TarotReading[]
  ritualSteps RitualStep[]
  tags        TagToObjectRelation[]

  name  String
  notes String?

  @@unique([userId, name])
}

model TarotPosition {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tarotSpread   TarotSpread @relation(fields: [tarotSpreadId], references: [id])
  tarotSpreadId String

  cardsDrawn TarotCardDraw[]
  tags       TagToObjectRelation[]

  description String?
  number      Int

  @@unique([tarotSpreadId, number], name: "TarotPositionCompoundId")
}

model TarotCardDraw {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card           TarotDeckCard         @relation(fields: [cardId], references: [id])
  cardId         String
  position       TarotPosition         @relation(fields: [positionId], references: [id])
  positionId     String
  tags           TagToObjectRelation[]
  tarotReading   TarotReading          @relation(fields: [tarotReadingId], references: [id])
  tarotReadingId String

  notes String?
}

model TarotCard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // TODO: Validate that, if MAI is populated, suit and rank are not. Vice vs if MAI is empty.
  majorArcanaInfo   MajorArcanaInfo? @relation(fields: [majorArcanaInfoId], references: [id])
  majorArcanaInfoId String?
  rank              TarotRank?       @relation(fields: [rankId], references: [id])
  rankId            String?
  suit              TarotSuit?       @relation(fields: [suitId], references: [id])
  suitId            String?

  tarotDeckCard TarotDeckCard[]
  tags          TagToObjectRelation[]

  notes                 String?
  commonMeaning         String?
  commonReversedMeaning String?

  @@unique([majorArcanaInfoId, rankId, suitId], name: "TarotCardCompoundId")
}

model TarotSuit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards   TarotCard[]
  aliases TarotSuitAlias[]

  name  String  @unique
  notes String?
}

model TarotSuitAlias {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck   TarotDeck @relation(fields: [deckId], references: [id])
  deckId String
  suit   TarotSuit @relation(fields: [suitId], references: [id])
  suitId String

  name String

  @@unique([deckId, suitId], name: "TarotSuitAliasCompoundId")
}

model TarotRank {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards TarotCard[]

  number Int     @unique // TODO: Validate range 1-14
  name   String  @unique
  notes  String?
}

model MajorArcanaInfo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards   TarotCard[]
  aliases MajorArcanaAlias[]

  number Int     @unique
  name   String  @unique
  notes  String?
}

model MajorArcanaAlias {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck              TarotDeck       @relation(fields: [deckId], references: [id])
  deckId            String
  majorArcanaInfo   MajorArcanaInfo @relation(fields: [majorArcanaInfoId], references: [id])
  majorArcanaInfoId String

  name String

  @@unique([deckId, majorArcanaInfoId], name: "MajorArcanaAliasCompoundId")
}

model TarotDeckCard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card        TarotCard @relation(fields: [cardId], references: [id])
  cardId      String
  tarotDeck   TarotDeck @relation(fields: [tarotDeckId], references: [id])
  tarotDeckId String

  draws TarotCardDraw[]
  tags  TagToObjectRelation[]

  alias           String?
  meaning         String?
  picture         String?
  reversedMeaning String?

  @@unique([cardId, tarotDeckId])
}

model TarotDeck {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  cards              TarotDeckCard[]
  majorArcanaAliases MajorArcanaAlias[]
  readings           TarotReading[]
  suitAliases        TarotSuitAlias[]
  tags               TagToObjectRelation[]

  name     String
  notes    String?
  pictures String[]

  @@unique([userId, name])
}

model TarotReadingToRitualObservanceAndStepRelation {
  ritualObservance   RitualObservance @relation(fields: [ritualObservanceId], references: [id])
  ritualObservanceId String
  ritualStep         RitualStep       @relation(fields: [ritualStepId], references: [id])
  ritualStepId       String
  tarotReading       TarotReading     @relation(fields: [tarotReadingId], references: [id])
  tarotReadingId     String

  dummy Int? // https://github.com/MichalLytek/typegraphql-prisma/issues/19

  @@id([ritualObservanceId, ritualStepId, tarotReadingId])
}

// TODO: Support Oracle decks
