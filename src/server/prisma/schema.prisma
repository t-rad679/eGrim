generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider                  = "typegraphql-prisma"
  emitRedundantTypesInfo    = true
  omitInputFieldsByDefault  = ["id", "createdAt", "updatedAt", "moonPhase"]
  omitOutputFieldsByDefault = ["passwordHash"]
  output                    = "../../../out/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base models
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Event    Event[]
  person   Person? @relation(fields: [personId], references: [id])
  personId String? @unique
  roles    Role[]  @default([USER])

  passwordHash String
  username     String @unique
}

enum Role {
  ADMIN
  USER
}

model Event {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location     Location?     @relation(fields: [locationId], references: [id])
  locationId   String?
  ritual       Ritual?
  tags         TagRelation[]
  tarotReading TarotReading?
  type         EventType
  user         User          @relation(fields: [userId], references: [id])
  userId       String

  date        DateTime
  description String
  // TODO: Consider adding more astrological data?
  moonPhase   Decimal // If this is null, the API we use to fetch it has failed and we should throw an error
  notes       String?
  outdoor     Boolean  @default(false)
  pictures    String[]
}

enum EventType {
  RITUAL
  SPOOKY_THING
  SYNCHRONICITY
  TAROT
  GENERAL
}

model Location {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Event Event[]
  tags  TagRelation[]

  address     String?
  city        String  @default("Atlanta")
  country     String  @default("USA")
  description String?
  name        String
  state       String  @default("GA")
}

model Person {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags                                TagRelation[]
  participantPersonToRitualRelation   ParticipantPersonToRitualRelation[]
  WielderPersonToToolRelationRelation WielderPersonToToolRelationRelation[]
  user                                User?
  querentOrReaderPersonRelation       TarotQuerentOrReaderPersonRelation[]

  name String @unique
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tagRelation TagRelation[]

  text String
  type String // This is the name of the table this tag is associated with
}

model TagRelation {
  id String @id @default(uuid()) // id field exists because multi-field IDs must be required

  Event           Event?         @relation(fields: [eventId], references: [id])
  eventId         String?
  Location        Location?      @relation(fields: [locationId], references: [id])
  locationId      String?
  person          Person?        @relation(fields: [personId], references: [id])
  personId        String?
  ritualResults   RitualResults? @relation(fields: [ritualResultsId], references: [id])
  ritualResultsId String?
  tag             Tag            @relation(fields: [tagId], references: [id])
  tagId           String
  tarotCard       TarotCard?     @relation(fields: [tarotCardId], references: [id])
  tarotCardId     String?
  tarotCardDraw   TarotCardDraw? @relation(fields: [tarotCardDrawId], references: [id])
  tarotCardDrawId String?
  tarotDeck       TarotDeck?     @relation(fields: [tarotDeckId], references: [id])
  tarotDeckId     String?
  tarotDeckCard   TarotDeckCard? @relation(fields: [tarotDeckCardId], references: [id])
  tarotDeckCardId String?
  tarotPosition   TarotPosition? @relation(fields: [tarotPositionId], references: [id])
  tarotPositionId String?
  tool            Tool?          @relation(fields: [toolId], references: [id])
  toolId          String?
  TarotSpread     TarotSpread?   @relation(fields: [tarotSpreadId], references: [id])
  tarotSpreadId   String?
}

// Ritual models
model Ritual {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event          Event                               @relation(fields: [eventId], references: [id])
  eventId        String                              @unique
  // TODO: validate that user, querent and reader are in participants for tarot readings
  participants   ParticipantPersonToRitualRelation[]
  results        RitualResults?
  toolRelation   ToolToRitualRelation[]
  toolRelationId String

  // TODO: Consider making steps a model, but I'm not sure what I would put in there
  steps String[]
}

model RitualResults {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  tags      TagRelation[]
  success   Boolean
  notes     String?
  ritual    Ritual        @relation(fields: [ritualId], references: [id])
  ritualId  String        @unique
}

enum RitualRole {
  LEADER
  PARTICIPANT
  SPECTATOR
}

model Tool {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags         TagRelation[]
  toolRelation ToolToRitualRelation[]

  name String
}

model ToolToRitualRelation {
  ritual   Ritual @relation(fields: [ritualId], references: [id])
  ritualId String
  tool     Tool   @relation(fields: [toolId], references: [id])
  toolId   String

  wieldersRelation WielderPersonToToolRelationRelation[]

  @@id([toolId, ritualId])
}

model WielderPersonToToolRelationRelation {
  toolToRitualRelationRitualId String
  toolToRitualRelationToolId   String
  wielderId                    String

  wielder              Person               @relation(fields: [wielderId], references: [id])
  toolToRitualRelation ToolToRitualRelation @relation(fields: [toolToRitualRelationToolId, toolToRitualRelationRitualId], references: [toolId, ritualId])

  @@id([toolToRitualRelationRitualId, toolToRitualRelationToolId, wielderId])
}

model ParticipantPersonToRitualRelation {
  personId String
  ritualId String

  person Person     @relation(fields: [personId], references: [id])
  ritual Ritual     @relation(fields: [ritualId], references: [id])
  role   RitualRole

  @@id([personId, ritualId])
}

// Tarot models
model TarotReading {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cardsDrawn                TarotCardDraw[]
  event                     Event                                @relation(fields: [eventId], references: [id])
  eventId                   String                               @unique
  // TODO: Validate that both exist in the resolver. Make field resolvers for them
  querentAndReaderRelations TarotQuerentOrReaderPersonRelation[]
  spread                    TarotSpread                          @relation(fields: [spreadId], references: [id])
  spreadId                  String
}

model TarotQuerentOrReaderPersonRelation {
  person         Person       @relation(fields: [personId], references: [id])
  personId       String
  tarotReading   TarotReading @relation(fields: [tarotReadingId], references: [id])
  tarotReadingId String

  role TarotRole

  @@id([personId, role, tarotReadingId])
}

enum TarotRole {
  QUERENT
  READER
}

model TarotSpread {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  positions    TarotPosition[]
  tags         TagRelation[]
  tarotReading TarotReading[]

  name        String
  description String
}

model TarotPosition {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cardDrawn     TarotCardDraw[]
  tags          TagRelation[]
  tarotSpread   TarotSpread     @relation(fields: [tarotSpreadId], references: [id])
  tarotSpreadId String

  description String
  number      Int
}

model TarotCardDraw {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  position       TarotPosition @relation(fields: [positionId], references: [id])
  positionId     String
  tags           TagRelation[]
  tarotReading   TarotReading  @relation(fields: [tarotReadingId], references: [id])
  tarotReadingId String

  notes String?
}

model TarotCard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  suit          TarotSuit
  tags          TagRelation[]
  tarotDeckCard TarotDeckCard[]

  name   String
  notes  String
  number Int
}

enum TarotSuit {
  CUPS
  PENTACLES
  SWORDS
  WANDS
  MAJOR_ARCANA
}

model TarotDeckCard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card        TarotCard     @relation(fields: [cardId], references: [id])
  cardId      String
  tags        TagRelation[]
  tarotDeck   TarotDeck     @relation(fields: [tarotDeckId], references: [id])
  tarotDeckId String

  notes    String
  pictures String
}

model TarotDeck {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags  TagRelation[]
  cards TarotDeckCard[]

  name  String
  notes String
}
